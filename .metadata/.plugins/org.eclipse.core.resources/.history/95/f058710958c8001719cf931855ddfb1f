package com.bjpowernode.test;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.junit.Test;
import org.mybatis.generator.api.MyBatisGenerator;
import org.mybatis.generator.config.Configuration;
import org.mybatis.generator.config.xml.ConfigurationParser;
import org.mybatis.generator.internal.DefaultShellCallback;

import com.bjpowernode.beans.Student;
import com.bjpowernode.beans.StudentExample;
import com.bjpowernode.beans.StudentExample.Criteria;
import com.bjpowernode.dao.StudentMapper;
import com.bjpowernode.utils.MyBatisUtils;

public class MyTest {	
	@Test
	public void testMbg() throws Exception{
		   List<String> warnings = new ArrayList<String>();
		   boolean overwrite = true;
		   File configFile = new File("mbg.xml");
		   ConfigurationParser cp = new ConfigurationParser(warnings);
		   Configuration config = cp.parseConfiguration(configFile);
		   DefaultShellCallback callback = new DefaultShellCallback(overwrite);
		   MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings);
		   myBatisGenerator.generate(null);
	}
	
	
	@Test
	public void testSimple() {
		SqlSession sqlSession = MyBatisUtils.getSqlSession();
		StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);
		try {
			List<Student> list = mapper.selectByExample(null); //不传条件
			for (Student student : list) {
				System.out.println(student.getId());
			}
		} finally {
			if(sqlSession != null){
				sqlSession.close();
			}
		}
		
	}
	
	@Test
	public void testMyBatis3(){
		SqlSession sqlSession = MyBatisUtils.getSqlSession();
		StudentMapper mapper = sqlSession.getMapper(StudentMapper.class);
		try {
			//  xxxExample 就是封装查询条件的
			
			//1.查询所有
			//List<Student> list = mapper.selectByExample(null); //不传条件
			
			//2.查询学生名字中带有e的,和学生年龄为11的 或者 score大于90的
			StudentExample example = new StudentExample();
			//创建一个Criteria ,这个Criteria 就是拼接查询条件
			Criteria criteria = example.createCriteria();
			criteria.andNameLike("%e%");
			criteria.andAgeEqualTo(11);
			
			Criteria criteria2 = example.createCriteria();
			criteria2.andScoreGreaterThan(90.0);
			example.or(criteria2);
			
			List<Student> list = mapper.selectByExample(example);
			for (Student student : list) {
				System.out.println(student.getName());
			}
		} finally {
			if(sqlSession != null){
				sqlSession.close();
			}
		}

	}
	
}
