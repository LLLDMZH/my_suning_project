package com.suning.facade.manager.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.suning.common.pojo.dto.ItemCatDTO;
import com.suning.common.pojo.vo.IndexVO;
import com.suning.facade.manager.entity.ItemCat;
import com.suning.facade.manager.service.ItemCatFacade;
import com.suning.manager.service.biz.ItemCatBiz;

/**
 * 门面模式 外观模式 对外部系统提供统一对entity实体的操作
 * 
 * @author Administrator
 *
 */
@Service("itemCatFacade")
public class ItemCatFacadeImpl implements ItemCatFacade{
	
	@Autowired
	private ItemCatBiz itemCatBiz;
	
	@Override
	public List<ItemCat> listItemsByParentId(Long parentId) {
		ItemCat record = new ItemCat();
		record.setParentId(parentId);
		return itemCatBiz.listByWhere(record);
	}

	@Override
	public ItemCat getItemById(Long cid) {
		return itemCatBiz.getById(cid);
	}

	@Override
	public IndexVO listIndexItemCat() {
			IndexVO result = new IndexVO();
			// 全部查出，并且在内存中生成树形结构
			List<ItemCat> cats = itemCatBiz.listAll();
			
			// 转为map存储，key为父节点ID，value为数据集合 大约20个
			Map<Long, List<ItemCat>> itemCatMap = new HashMap<Long, List<ItemCat>>(16);
			//进行分拣
			for (ItemCat itemCat : cats) {
				//如果当前Map中没有 你遍历元素的parentId
				if(!itemCatMap.containsKey(itemCat.getParentId())){
					//将此item的parentId作为Key，ArrayList作为value存入map
					itemCatMap.put(itemCat.getParentId(), new ArrayList<ItemCat>());
				}
				//如果有 那么直接获取对应parentId key所对应的ArrayList 加入对象
				itemCatMap.get(itemCat.getParentId()).add(itemCat);
			}
			
			// 封装一级对象
			List<ItemCat> itemCatList1 = itemCatMap.get(0L);
			for (ItemCat itemCat : itemCatList1) {
				ItemCatDTO itemCatData = new ItemCatDTO();
				itemCatData.setUrl("/products/" + itemCat.getId() + ".html");
				itemCatData.setName("<a href='"+itemCatData.getUrl()+"'>"+itemCat.getItemName()+"</a>");
				result.getItemCats().add(itemCatData);
				if(!itemCat.getIsParent()){
					continue;
				}
				
				// 封装二级对象
				List<ItemCat> itemCatList2 = itemCatMap.get(itemCat.getId());
				List<ItemCatDTO> itemCatData2 = new ArrayList<ItemCatDTO>();
				itemCatData.setItems(itemCatData2);
				for (ItemCat itemCat2 : itemCatList2) {
					ItemCatDTO id2 = new ItemCatDTO();
					id2.setName(itemCat2.getItemName());
					id2.setUrl("/products/" + itemCat2.getId() + ".html");
					itemCatData2.add(id2);
					if(itemCat2.getIsParent()){
						// 封装三级对象
						List<ItemCat> itemCatList3 = itemCatMap.get(itemCat2.getId());
						List<String> itemCatData3 = new ArrayList<String>();
						id2.setItems(itemCatData3);
						for (ItemCat itemCat3 : itemCatList3) {
							itemCatData3.add("/products/" + itemCat3.getId() + ".html|"+itemCat3.getItemName());
						}
					}
				}
				if(result.getItemCats().size() >= 14){
					break;
				}
			}
			return result;
		}

}
